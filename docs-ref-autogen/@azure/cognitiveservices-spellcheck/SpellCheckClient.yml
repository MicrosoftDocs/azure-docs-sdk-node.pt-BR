### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient'
    name: SpellCheckClient
    fullName: SpellCheckClient
    children:
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'endpoint?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Envie uma solicitação HTTP que é populada usando o OperationSpec fornecido.
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: Os argumentos que serão preenchidos de valores de modelo da solicitação HTTP.
        - id: operationSpec
          type:
            - OperationSpec
          description: OperationSpec serem usados para popular o httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            O retorno de chamada a ser chamada quando a resposta é recebida.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Envie httpRequest fornecido.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
    name: 'SpellCheckClient(ServiceClientCredentials, Models.SpellCheckClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Inicializa uma nova instância da classe SpellCheckClient.
    syntax:
      content: 'new SpellCheckClient(credentials: ServiceClientCredentials, options?: Models.SpellCheckClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Credenciais de assinatura que identificam exclusivamente a assinatura de cliente.
        - id: options
          type:
            - Models.SpellCheckClientOptions
          description: ''
          optional: true
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
    name: 'spellChecker(string, Models.SpellCheckClientSpellCheckerOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options?: Models.SpellCheckClientSpellCheckerOptionalParams)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            A cadeia de caracteres de texto para verificar se há erros de ortografia e gramática. O comprimento combinado da cadeia de caracteres de texto, preContextText de cadeia de caracteres e cadeia de caracteres postContextText não pode exceder 10.000 caracteres.
            Você pode especificar esse parâmetro na cadeia de caracteres de consulta de uma solicitação GET ou no corpo de uma solicitação POST. Por causa do limite de tamanho da cadeia de caracteres de consulta, você normalmente usará uma solicitação POST, a menos que você está verificando apenas cadeias de caracteres curtas.
        - id: options
          type:
            - Models.SpellCheckClientSpellCheckerOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
    name: 'spellChecker(string, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            A cadeia de caracteres de texto para verificar se há erros de ortografia e gramática. O comprimento combinado da cadeia de caracteres de texto, preContextText de cadeia de caracteres e cadeia de caracteres postContextText não pode exceder 10.000 caracteres.
            Você pode especificar esse parâmetro na cadeia de caracteres de consulta de uma solicitação GET ou no corpo de uma solicitação POST. Por causa do limite de tamanho da cadeia de caracteres de consulta, você normalmente usará uma solicitação POST, a menos que você está verificando apenas cadeias de caracteres curtas.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    name: 'spellChecker(string, SpellCheckClientSpellCheckerOptionalParams, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options: SpellCheckClientSpellCheckerOptionalParams, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            A cadeia de caracteres de texto para verificar se há erros de ortografia e gramática. O comprimento combinado da cadeia de caracteres de texto, preContextText de cadeia de caracteres e cadeia de caracteres postContextText não pode exceder 10.000 caracteres.
            Você pode especificar esse parâmetro na cadeia de caracteres de consulta de uma solicitação GET ou no corpo de uma solicitação POST. Por causa do limite de tamanho da cadeia de caracteres de consulta, você normalmente usará uma solicitação POST, a menos que você está verificando apenas cadeias de caracteres curtas.
        - id: options
          type:
            - '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
references:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    name: SpellCheckClientContext
    spec.typeScript:
      - name: SpellCheckClientContext
        fullName: SpellCheckClientContext
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
    name: SpellCheck>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SpellCheck
        fullName: SpellCheck
        uid: '@azure/cognitiveservices-spellcheck.SpellCheck'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
    name: SpellCheckClientSpellCheckerOptionalParams
    spec.typeScript:
      - name: SpellCheckClientSpellCheckerOptionalParams
        fullName: SpellCheckClientSpellCheckerOptionalParams
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'