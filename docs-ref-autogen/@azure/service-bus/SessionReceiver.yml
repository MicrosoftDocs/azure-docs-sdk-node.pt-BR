### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      <span data-ttu-id="96e6f-101">A classe SessionReceiver pode ser usada para receber mensagens de uma sessão habilitada em um lote ou Registrando manipuladores de assinatura ou fila.</span><span class="sxs-lookup"><span data-stu-id="96e6f-101">The SessionReceiver class can be used to receive messages from a session enabled Queue or Subscription in a batch or by registering handlers.</span></span>
      <span data-ttu-id="96e6f-102">Use o `createReceiver` função no QueueClient ou SubscriptionClient para instanciar um SessionReceiver.</span><span class="sxs-lookup"><span data-stu-id="96e6f-102">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a SessionReceiver.</span></span>
      <span data-ttu-id="96e6f-103">A classe SessionReceiver é uma abstração de link receptor AMQP subjacente.</span><span class="sxs-lookup"><span data-stu-id="96e6f-103">The SessionReceiver class is an abstraction over the underlying AMQP receiver link.</span></span>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="96e6f-104">Fecha o link de receptor AMQP subjacente.</span><span class="sxs-lookup"><span data-stu-id="96e6f-104">Closes the underlying AMQP receiver link.</span></span>
      <span data-ttu-id="96e6f-105">Depois de fechada, o receptor não pode ser usado para nenhuma outra operação.</span><span class="sxs-lookup"><span data-stu-id="96e6f-105">Once closed, the receiver cannot be used for any further operations.</span></span>
      <span data-ttu-id="96e6f-106">Use o `createReceiver` função no QueueClient ou SubscriptionClient para instanciar um novo receptor</span><span class="sxs-lookup"><span data-stu-id="96e6f-106">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a new Receiver</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="96e6f-107">Obtém um iterador assíncrono sobre mensagens do receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-107">Gets an async iterator over messages from the receiver.</span></span>
      <span data-ttu-id="96e6f-108">Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo.</span><span class="sxs-lookup"><span data-stu-id="96e6f-108">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="96e6f-109">Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-109">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>

      <span data-ttu-id="96e6f-110">Se o iterador não é capaz de buscar uma nova mensagem em mais de um minuto, `undefined` será retornado</span><span class="sxs-lookup"><span data-stu-id="96e6f-110">If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned</span></span>
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="96e6f-111">Obtém o estado da sessão.</span><span class="sxs-lookup"><span data-stu-id="96e6f-111">Gets the state of the Session.</span></span> <span data-ttu-id="96e6f-112">Para obter mais informações sobre estados de sessão, consulte [estado de sessão](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span><span class="sxs-lookup"><span data-stu-id="96e6f-112">For more on session states, see [Session State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span></span>'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="96e6f-113">Retorna `true` se o receptor for fechado.</span><span class="sxs-lookup"><span data-stu-id="96e6f-113">Returns `true` if the receiver is closed.</span></span> <span data-ttu-id="96e6f-114">Isso pode acontecer uma porque o receptor em si foi fechado ou o cliente que o criou foi fechado.</span><span class="sxs-lookup"><span data-stu-id="96e6f-114">This can happen either because the receiver itself has been closed or the client that created it has been closed.</span></span>
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="96e6f-115">Indica se o destinatário está recebendo mensagens no momento ou não.</span><span class="sxs-lookup"><span data-stu-id="96e6f-115">Indicates whether the receiver is currently receiving messages or not.</span></span>
      <span data-ttu-id="96e6f-116">Quando isso retorna true, novos `registerMessageHandler()` ou `receiveMessages()` chamadas não podem ser feitas.</span><span class="sxs-lookup"><span data-stu-id="96e6f-116">When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.</span></span>
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="96e6f-117">Busca o próximo lote de mensagens ativas (incluindo adiada, mas não morto mensagens) na sessão atual.</span><span class="sxs-lookup"><span data-stu-id="96e6f-117">Fetches the next batch of active messages (including deferred but not deadlettered messages) in the current session.</span></span>
      - <span data-ttu-id="96e6f-118">A primeira chamada para `peek()` busca a primeira mensagem ativa.</span><span class="sxs-lookup"><span data-stu-id="96e6f-118">The first call to `peek()` fetches the first active message.</span></span> <span data-ttu-id="96e6f-119">Cada chamada subsequente busca a mensagem subsequente.</span><span class="sxs-lookup"><span data-stu-id="96e6f-119">Each subsequent call fetches the subsequent message.</span></span>
      - <span data-ttu-id="96e6f-120">Ao contrário de um `received` mensagem, `peeked` mensagem é uma versão somente leitura da mensagem.</span><span class="sxs-lookup"><span data-stu-id="96e6f-120">Unlike a `received` message, `peeked` message is a read-only version of the message.</span></span>
      <span data-ttu-id="96e6f-121">Ele não pode ser `Completed/Abandoned/Deferred/Deadlettered`.</span><span class="sxs-lookup"><span data-stu-id="96e6f-121">It cannot be `Completed/Abandoned/Deferred/Deadlettered`.</span></span> <span data-ttu-id="96e6f-122">O bloqueio não pode ser renovado.</span><span class="sxs-lookup"><span data-stu-id="96e6f-122">The lock on it cannot be renewed.</span></span>
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: <span data-ttu-id="96e6f-123">O número máximo de mensagens a serem inspecionadas.</span><span class="sxs-lookup"><span data-stu-id="96e6f-123">The maximum number of messages to peek.</span></span> <span data-ttu-id="96e6f-124">Valor padrão `1`.</span><span class="sxs-lookup"><span data-stu-id="96e6f-124">Default value `1`.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="96e6f-125">Exibe o número desejado de mensagens ativas (incluindo adiada, mas não morto mensagens) do número de sequência especificado na sessão atual.</span><span class="sxs-lookup"><span data-stu-id="96e6f-125">Peeks the desired number of active messages (including deferred but not deadlettered messages) from the specified sequence number in the current session.</span></span>
      - <span data-ttu-id="96e6f-126">Ao contrário de um `received` mensagem, `peeked` mensagem é uma versão somente leitura da mensagem.</span><span class="sxs-lookup"><span data-stu-id="96e6f-126">Unlike a `received` message, `peeked` message is a read-only version of the message.</span></span>
      <span data-ttu-id="96e6f-127">Ele não pode ser `Completed/Abandoned/Deferred/Deadlettered`.</span><span class="sxs-lookup"><span data-stu-id="96e6f-127">It cannot be `Completed/Abandoned/Deferred/Deadlettered`.</span></span> <span data-ttu-id="96e6f-128">O bloqueio não pode ser renovado.</span><span class="sxs-lookup"><span data-stu-id="96e6f-128">The lock on it cannot be renewed.</span></span>
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: <span data-ttu-id="96e6f-129">O número de sequência a partir do qual ler a mensagem.</span><span class="sxs-lookup"><span data-stu-id="96e6f-129">The sequence number from where to read the message.</span></span>
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="96e6f-130">Retorna uma promessa que resolve para uma mensagem adiada identificada pelo determinado `sequenceNumber`.</span><span class="sxs-lookup"><span data-stu-id="96e6f-130">Returns a promise that resolves to a deferred message identified by the given `sequenceNumber`.</span></span>
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: <span data-ttu-id="96e6f-131">O número de sequência da mensagem de que precisa para ser recebida.</span><span class="sxs-lookup"><span data-stu-id="96e6f-131">The sequence number of the message that needs to be received.</span></span>
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="96e6f-132">Retorna uma promessa que resolve para uma matriz das mensagens adiadas identificado por fornecida `sequenceNumbers`.</span><span class="sxs-lookup"><span data-stu-id="96e6f-132">Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.</span></span>
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: <span data-ttu-id="96e6f-133">Uma matriz de números de sequência para as mensagens que precisam para ser recebida.</span><span class="sxs-lookup"><span data-stu-id="96e6f-133">An array of sequence numbers for the messages that need to be received.</span></span>
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="96e6f-134">Retorna uma promessa que resolve para uma matriz de mensagens com base em determinadas contagem e o tempo limite ao longo de um receptor de AMQP vincular-se de uma fila/assinatura.</span><span class="sxs-lookup"><span data-stu-id="96e6f-134">Returns a promise that resolves to an array of messages based on given count and timeout over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="96e6f-135">Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo.</span><span class="sxs-lookup"><span data-stu-id="96e6f-135">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="96e6f-136">Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-136">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: <span data-ttu-id="96e6f-137">O número máximo de mensagens para receber da fila/assinatura.</span><span class="sxs-lookup"><span data-stu-id="96e6f-137">The maximum number of messages to receive from Queue/Subscription.</span></span>
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            <span data-ttu-id="96e6f-138">O máximo tempo de espera em segundos para o qual o receptor deve esperar para receber a primeira mensagem.</span><span class="sxs-lookup"><span data-stu-id="96e6f-138">The maximum wait time in seconds for which the Receiver should wait to receive the first message.</span></span> <span data-ttu-id="96e6f-139">Se nenhuma mensagem for recebida por esse tempo, promise retornado é resolvido para uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="96e6f-139">If no message is received by this time, the returned promise gets resolved to an empty array.</span></span>
            - <span data-ttu-id="96e6f-140">**Padrão**: `60` segundos.</span><span class="sxs-lookup"><span data-stu-id="96e6f-140">**Default**: `60` seconds.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="96e6f-141">Denota receiveMode desse receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-141">Denotes receiveMode of this receiver.</span></span>
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="96e6f-142">Registra manipuladores para lidar com o fluxo de mensagens de entrada em um link de receptor AMQP de uma fila/assinatura.</span><span class="sxs-lookup"><span data-stu-id="96e6f-142">Registers handlers to deal with the incoming stream of messages over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="96e6f-143">Para interromper o recebimento de mensagens, chame `close()` sobre o SessionReceiver.</span><span class="sxs-lookup"><span data-stu-id="96e6f-143">To stop receiving messages, call `close()` on the SessionReceiver.</span></span>
      <span data-ttu-id="96e6f-144">Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo.</span><span class="sxs-lookup"><span data-stu-id="96e6f-144">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="96e6f-145">Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-145">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: <span data-ttu-id="96e6f-146">Manipulador para processar cada mensagem de entrada.</span><span class="sxs-lookup"><span data-stu-id="96e6f-146">Handler for processing each incoming message.</span></span>
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: <span data-ttu-id="96e6f-147">Manipulador para qualquer erro que ocorre ao receber ou processar mensagens.</span><span class="sxs-lookup"><span data-stu-id="96e6f-147">Handler for any error that occurs while receiving or processing messages.</span></span>
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            <span data-ttu-id="96e6f-148">Opções para controlar se as mensagens devem ser concluídas automaticamente ou se o bloqueio de sessão deve ser renovado automaticamente.</span><span class="sxs-lookup"><span data-stu-id="96e6f-148">Options to control whether messages should be automatically completed or if the lock on the session should be automatically renewed.</span></span> <span data-ttu-id="96e6f-149">Você pode controlar o número máximo de mensagens que devem ser processadas simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="96e6f-149">You can control the maximum number of messages that should be concurrently processed.</span></span> <span data-ttu-id="96e6f-150">Você também pode fornecer um tempo limite em segundos para indicar a quantidade de tempo de espera por uma nova mensagem antes de fechar o receptor.</span><span class="sxs-lookup"><span data-stu-id="96e6f-150">You can also provide a timeout in seconds to denote the amount of time to wait for a new message before closing the receiver.</span></span>
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="96e6f-151">Renova o bloqueio na sessão para a duração conforme especificado durante a criação da fila/assinatura.</span><span class="sxs-lookup"><span data-stu-id="96e6f-151">Renews the lock on the session for the duration as specified during the Queue/Subscription creation.</span></span>
      - <span data-ttu-id="96e6f-152">Verifique o `sessionLockedUntilUtc` propriedade sobre a SessionReceiver para a hora quando o bloqueio expira.</span><span class="sxs-lookup"><span data-stu-id="96e6f-152">Check the `sessionLockedUntilUtc` property on the SessionReceiver for the time when the lock expires.</span></span>
      - <span data-ttu-id="96e6f-153">Quando o bloqueio na sessão expira</span><span class="sxs-lookup"><span data-stu-id="96e6f-153">When the lock on the session expires</span></span>
          - <span data-ttu-id="96e6f-154">Não há mais mensagens de erro podem ser recebidas usando esse receptor</span><span class="sxs-lookup"><span data-stu-id="96e6f-154">No more messages can be received using this receiver</span></span>
          - <span data-ttu-id="96e6f-155">Se uma mensagem não for liquidada (usando um `complete()`, `defer()` ou `deadletter()`, antes da sessão de bloqueio expirar, então os territórios de mensagem novamente na fila/assinatura para a próxima operação de recebimento.</span><span class="sxs-lookup"><span data-stu-id="96e6f-155">If a message is not settled (using either `complete()`, `defer()` or `deadletter()`, before the session lock expires, then the message lands back in the Queue/Subscription for the next receive operation.</span></span>
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      <span data-ttu-id="96e6f-156">A id da sessão em que esse receptor receberá mensagens.</span><span class="sxs-lookup"><span data-stu-id="96e6f-156">The id of the session from which this receiver will receive messages.</span></span>
      <span data-ttu-id="96e6f-157">Retornará indefinido até que um link de receptor AMQP tem foi configurado com êxito para a sessão.</span><span class="sxs-lookup"><span data-stu-id="96e6f-157">Will return undefined until a AMQP receiver link has been successfully set up for the session.</span></span>
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      <span data-ttu-id="96e6f-158">A hora em UTC até a qual a sessão está bloqueada.</span><span class="sxs-lookup"><span data-stu-id="96e6f-158">The time in UTC until which the session is locked.</span></span>
      <span data-ttu-id="96e6f-159">Toda vez que `renewSessionLock()` é chamado, esse tempo é atualizado para a hora atual mais a duração do bloqueio conforme especificado durante a criação da fila/assinatura.</span><span class="sxs-lookup"><span data-stu-id="96e6f-159">Everytime `renewSessionLock()` is called, this time gets updated to current time plus the lock duration as specified during the Queue/Subscription creation.</span></span>

      <span data-ttu-id="96e6f-160">Retornará indefinido até que um link de receptor AMQP tem foi configurado com êxito para a sessão.</span><span class="sxs-lookup"><span data-stu-id="96e6f-160">Will return undefined until a AMQP receiver link has been successfully set up for the session.</span></span>
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="96e6f-161">Define o estado na sessão.</span><span class="sxs-lookup"><span data-stu-id="96e6f-161">Sets the state on the Session.</span></span> <span data-ttu-id="96e6f-162">Para obter mais informações sobre estados de sessão, consulte [estado de sessão](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span><span class="sxs-lookup"><span data-stu-id="96e6f-162">For more on session states, see [Session State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span></span>'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            <span data-ttu-id="96e6f-163">O estado que precisa ser definido.</span><span class="sxs-lookup"><span data-stu-id="96e6f-163">The state that needs to be set.</span></span>
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'