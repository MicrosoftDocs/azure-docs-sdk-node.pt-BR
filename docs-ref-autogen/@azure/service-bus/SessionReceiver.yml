### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      A classe SessionReceiver pode ser usada para receber mensagens de uma sessão habilitada em um lote ou Registrando manipuladores de assinatura ou fila.
      Use o `createReceiver` função no QueueClient ou SubscriptionClient para instanciar um SessionReceiver.
      A classe SessionReceiver é uma abstração de link receptor AMQP subjacente.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Fecha o link de receptor AMQP subjacente.
      Depois de fechada, o receptor não pode ser usado para nenhuma outra operação.
      Use o `createReceiver` função no QueueClient ou SubscriptionClient para instanciar um novo receptor
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Obtém um iterador assíncrono sobre mensagens do receptor.
      Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo. Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.

      Se o iterador não é capaz de buscar uma nova mensagem em mais de um minuto, `undefined` será retornado
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Obtém o estado da sessão. Para obter mais informações sobre estados de sessão, consulte [estado de sessão](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Retorna `true` se o receptor for fechado. Isso pode acontecer uma porque o receptor em si foi fechado ou o cliente que o criou foi fechado.
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Indica se o destinatário está recebendo mensagens no momento ou não.
      Quando isso retorna true, novos `registerMessageHandler()` ou `receiveMessages()` chamadas não podem ser feitas.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Busca o próximo lote de mensagens ativas (incluindo adiada, mas não morto mensagens) na sessão atual.
      - A primeira chamada para `peek()` busca a primeira mensagem ativa. Cada chamada subsequente busca a mensagem subsequente.
      - Ao contrário de um `received` mensagem, `peeked` mensagem é uma versão somente leitura da mensagem.
      Ele não pode ser `Completed/Abandoned/Deferred/Deadlettered`. O bloqueio não pode ser renovado.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: O número máximo de mensagens a serem inspecionadas. Valor padrão `1`.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Exibe o número desejado de mensagens ativas (incluindo adiada, mas não morto mensagens) do número de sequência especificado na sessão atual.
      - Ao contrário de um `received` mensagem, `peeked` mensagem é uma versão somente leitura da mensagem.
      Ele não pode ser `Completed/Abandoned/Deferred/Deadlettered`. O bloqueio não pode ser renovado.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: O número de sequência a partir do qual ler a mensagem.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retorna uma promessa que resolve para uma mensagem adiada identificada pelo determinado `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: O número de sequência da mensagem de que precisa para ser recebida.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retorna uma promessa que resolve para uma matriz das mensagens adiadas identificado por fornecida `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Uma matriz de números de sequência para as mensagens que precisam para ser recebida.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Retorna uma promessa que resolve para uma matriz de mensagens com base em determinadas contagem e o tempo limite ao longo de um receptor de AMQP vincular-se de uma fila/assinatura.
      Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo. Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: O número máximo de mensagens para receber da fila/assinatura.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            O máximo tempo de espera em segundos para o qual o receptor deve esperar para receber a primeira mensagem. Se nenhuma mensagem for recebida por esse tempo, promise retornado é resolvido para uma matriz vazia.
            - **Padrão**: `60` segundos.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Denota receiveMode desse receptor.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registra manipuladores para lidar com o fluxo de mensagens de entrada em um link de receptor AMQP de uma fila/assinatura.
      Para interromper o recebimento de mensagens, chame `close()` sobre o SessionReceiver.
      Gera um erro se não houver outra operação de recebimento em andamento no destinatário do mesmo. Se você não tiver certeza se há outra execução da operação de recebimento, verifique o `isReceivingMessages` propriedade no receptor.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Manipulador para processar cada mensagem de entrada.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: Manipulador para qualquer erro que ocorre ao receber ou processar mensagens.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            Opções para controlar se as mensagens devem ser concluídas automaticamente ou se o bloqueio de sessão deve ser renovado automaticamente. Você pode controlar o número máximo de mensagens que devem ser processadas simultaneamente. Você também pode fornecer um tempo limite em segundos para indicar a quantidade de tempo de espera por uma nova mensagem antes de fechar o receptor.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Renova o bloqueio na sessão para a duração conforme especificado durante a criação da fila/assinatura.
      - Verifique o `sessionLockedUntilUtc` propriedade sobre a SessionReceiver para a hora quando o bloqueio expira.
      - Quando o bloqueio na sessão expira
          - Não há mais mensagens de erro podem ser recebidas usando esse receptor
          - Se uma mensagem não for liquidada (usando um `complete()`, `defer()` ou `deadletter()`, antes da sessão de bloqueio expirar, então os territórios de mensagem novamente na fila/assinatura para a próxima operação de recebimento.
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A id da sessão em que esse receptor receberá mensagens.
      Retornará indefinido até que um link de receptor AMQP tem foi configurado com êxito para a sessão.
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A hora em UTC até a qual a sessão está bloqueada.
      Toda vez que `renewSessionLock()` é chamado, esse tempo é atualizado para a hora atual mais a duração do bloqueio conforme especificado durante a criação da fila/assinatura.

      Retornará indefinido até que um link de receptor AMQP tem foi configurado com êxito para a sessão.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Define o estado na sessão. Para obter mais informações sobre estados de sessão, consulte [estado de sessão](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            O estado que precisa ser definido.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'