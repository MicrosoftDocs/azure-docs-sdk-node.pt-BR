### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessage'
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.scheduleMessage'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.send'
      - '@azure/service-bus.Sender.sendBatch'
    langs:
      - typeScript
    type: class
    summary: |-
      A classe de remetente pode ser usada para enviar mensagens, agendar mensagens sejam enviados em um momento posterior e Cancelar tais mensagens agendadas.
      Use o `createSender` função no QueueClient ou TopicClient para criar uma instância de um remetente.
      A classe do remetente é uma abstração sobre o link de remetente AMQP subjacente.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    name: cancelScheduledMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancela uma mensagem que foi agendada para aparecer em uma fila/assinatura do barramento de serviço.
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: O número de sequência da mensagem a ser cancelada.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancela a várias mensagens que foram agendadas para aparecer em uma fila/assinatura do barramento de serviço.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Uma matriz de números de sequência das mensagens a ser cancelada.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Fecha o link do remetente AMQP subjacente.
      Depois de fechada, o remetente não pode ser usado para nenhuma outra operação.
      Use o `createSender` função no QueueClient ou TopicClient para instanciar um novo remetente
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Retorna `true` se o remetente ou o cliente que criou a ele foi fechado
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessage'
    name: 'scheduleMessage(Date, SendableMessageInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Agendas dada mensagem apareça no barramento de serviço de fila/assinatura em um momento posterior.
    syntax:
      content: 'function scheduleMessage(scheduledEnqueueTimeUtc: Date, message: SendableMessageInfo)'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: A hora UTC em que a mensagem deve ser enfileirada.
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: A mensagem de que precisa ser agendada.
      return:
        type:
          - Promise<Long>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Agendas recebe mensagens apareçam no barramento de serviço de fila/assinatura em um momento posterior.
    syntax:
      content: 'function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages: SendableMessageInfo[])'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: A hora UTC em que as mensagens devem ser enfileirado.
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Matriz de mensagens que precisa ser agendada.
      return:
        type:
          - 'Promise<Long[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Envia a mensagem fornecida após a criação de um link de remetente do AMQP se ele ainda não existe.
      Para enviar uma mensagem para um `session` e/ou `partition` fila/tópico habilitado, defina as `sessionId` e/ou `partitionKey` propriedades respectivamente na mensagem.
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: Mensagem a enviar.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Envia as mensagens de determinado em um único lote, ou seja, em uma única mensagem do AMQP, depois de criar um link de remetente do AMQP se ele ainda não existe.
      - Para enviar mensagens para um `session` e/ou `partition` fila/tópico habilitado, defina as `sessionId` e/ou `partitionKey` propriedades respectivamente nas mensagens.
      - Ao fazer isso, todas as mensagens em lote devem ter o mesmo `sessionId` (se estiver usando sessões) e o mesmo `parititionKey` (se estiver usando partições).
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Uma matriz de objetos de SendableMessageInfo a serem enviados em uma mensagem de lote.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'