### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson'
    name: PersonGroupPerson
    fullName: PersonGroupPerson
    children:
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream'
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl'
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.create'
      - '@azure/cognitiveservices-face.PersonGroupPerson.create_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.create_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.get'
      - '@azure/cognitiveservices-face.PersonGroupPerson.get_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.get_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.getFace'
      - '@azure/cognitiveservices-face.PersonGroupPerson.getFace_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.getFace_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.list'
      - '@azure/cognitiveservices-face.PersonGroupPerson.list_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.list_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.constructor'
      - '@azure/cognitiveservices-face.PersonGroupPerson.update'
      - '@azure/cognitiveservices-face.PersonGroupPerson.update_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.update_1'
      - '@azure/cognitiveservices-face.PersonGroupPerson.updateFace'
      - '@azure/cognitiveservices-face.PersonGroupPerson.updateFace_2'
      - '@azure/cognitiveservices-face.PersonGroupPerson.updateFace_1'
    langs:
      - typeScript
    type: class
    summary: Classe que representa um PersonGroupPerson.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream'
    name: 'addFaceFromStream(string, string, msRest.HttpRequestBody, Models.PersonGroupPersonAddFaceFromStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Adicione uma face de uma pessoa em um grupo de pessoas para verificação ou de identificação de face. Para lidar com uma imagem contém várias faces, face de entrada pode ser especificado como uma imagem com um retângulo targetFace. Ele retorna um persistedFaceId que representa a face adicionada. Nenhuma imagem será armazenada.
      Somente o recurso de face extraído será armazenado no servidor até que [PersonGroup PersonFace - exclua](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup pessoa - excluir](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) ou [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) é chamado.
      <br /> Observação persistedFaceId é diferente do faceId gerado pelo [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      *   Qualidade de imagem de face superior significa maior precisão do reconhecimento. Considere as faces de alta qualidade: frontais, clear e face tamanho é de 200 x 200 pixels (100 pixels, entre os olhos) ou maior.
      *   Cada entrada de pessoa pode conter até 248 faces.
      *   Há suporte para JPEG, PNG, GIF (o primeiro quadro) e formato BMP. O tamanho do arquivo de imagem permitida é de 1KB a 6MB.
      *   "targetFace" retângulo deve conter uma face. Zero ou várias faces serão considerados um erro. Se o retângulo "targetFace" fornecido não for retornado por [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), não há nenhuma garantia para detectar e adicionar a face com êxito.
      *   Fora do tamanho de face detectável (36 x pixels de 4096 x 36 4096), grandes occlusions pose head ou grandes causará falhas.
      *   Adição/exclusão de faces de/para uma pessoa mesma será processado sequencialmente. Adição/exclusão de faces de/para diferentes pessoas são processados em paralelo.
      * O tamanho mínimo de face detectável é de 36 x 36 pixels em uma imagem não maior que 1920 x 1080 pixels.
      Imagens com dimensões mais que 1920 x 1080 pixels precisará de um tamanho de face mínimos proporcionalmente maior.
      * Valores de diferentes 'detectionModel' podem ser fornecidos. Para usar e comparar os modelos diferentes de detecção, consulte [como especificar um modelo de detecção](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Modelo | Uso recomendado-case(s) |
      | ---------- | -------- |
      | 'detection_01': | O modelo de detecção padrão para [PersonGroup pessoa - adicionar
      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). É recomendável para detecção de face frontal quase. Para cenários com faces do ângulo excepcionalmente grande (head-pose), faces obstruídos ou orientação de imagem incorreto, as faces nesses casos, podem não ser detectadas. | | 'detection_02': | Modelo de detecção, lançado em 2019 talvez com precisão aprimorada, especialmente em pequenas, lado e desfocadas faces. |
    syntax:
      content: 'function addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.PersonGroupPersonAddFaceFromStreamOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Um fluxo de imagem.
        - id: options
          type:
            - Models.PersonGroupPersonAddFaceFromStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream_2'
    name: 'addFaceFromStream(string, string, msRest.HttpRequestBody, PersonGroupPersonAddFaceFromStreamOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options: PersonGroupPersonAddFaceFromStreamOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Um fluxo de imagem.
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromStreamOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromStream_1'
    name: 'addFaceFromStream(string, string, msRest.HttpRequestBody, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Um fluxo de imagem.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl'
    name: 'addFaceFromUrl(string, string, string, Models.PersonGroupPersonAddFaceFromUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Adicione uma face de uma pessoa em um grupo de pessoas para verificação ou de identificação de face. Para lidar com uma imagem contém várias faces, face de entrada pode ser especificado como uma imagem com um retângulo targetFace. Ele retorna um persistedFaceId que representa a face adicionada. Nenhuma imagem será armazenada.
      Somente o recurso de face extraído será armazenado no servidor até que [PersonGroup PersonFace - exclua](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup pessoa - excluir](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) ou [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) é chamado.
      <br /> Observação persistedFaceId é diferente do faceId gerado pelo [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      *   Qualidade de imagem de face superior significa maior precisão do reconhecimento. Considere as faces de alta qualidade: frontais, clear e face tamanho é de 200 x 200 pixels (100 pixels, entre os olhos) ou maior.
      *   Cada entrada de pessoa pode conter até 248 faces.
      *   Há suporte para JPEG, PNG, GIF (o primeiro quadro) e formato BMP. O tamanho do arquivo de imagem permitida é de 1KB a 6MB.
      *   "targetFace" retângulo deve conter uma face. Zero ou várias faces serão considerados um erro. Se o retângulo "targetFace" fornecido não for retornado por [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), não há nenhuma garantia para detectar e adicionar a face com êxito.
      *   Fora do tamanho de face detectável (36 x pixels de 4096 x 36 4096), grandes occlusions pose head ou grandes causará falhas.
      *   Adição/exclusão de faces de/para uma pessoa mesma será processado sequencialmente. Adição/exclusão de faces de/para diferentes pessoas são processados em paralelo.
      * O tamanho mínimo de face detectável é de 36 x 36 pixels em uma imagem não maior que 1920 x 1080 pixels.
      Imagens com dimensões mais que 1920 x 1080 pixels precisará de um tamanho de face mínimos proporcionalmente maior.
      * Valores de diferentes 'detectionModel' podem ser fornecidos. Para usar e comparar os modelos diferentes de detecção, consulte [como especificar um modelo de detecção](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Modelo | Uso recomendado-case(s) |
      | ---------- | -------- |
      | 'detection_01': | O modelo de detecção padrão para [PersonGroup pessoa - adicionar
      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). É recomendável para detecção de face frontal quase. Para cenários com faces do ângulo excepcionalmente grande (head-pose), faces obstruídos ou orientação de imagem incorreto, as faces nesses casos, podem não ser detectadas. | | 'detection_02': | Modelo de detecção, lançado em 2019 talvez com precisão aprimorada, especialmente em pequenas, lado e desfocadas faces. |
    syntax:
      content: 'function addFaceFromUrl(personGroupId: string, personId: string, url: string, options?: Models.PersonGroupPersonAddFaceFromUrlOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: url
          type:
            - string
          description: URL publicamente acessível de uma imagem
        - id: options
          type:
            - Models.PersonGroupPersonAddFaceFromUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl_2'
    name: 'addFaceFromUrl(string, string, string, PersonGroupPersonAddFaceFromUrlOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(personGroupId: string, personId: string, url: string, options: PersonGroupPersonAddFaceFromUrlOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: url
          type:
            - string
          description: URL publicamente acessível de uma imagem
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromUrlOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.addFaceFromUrl_1'
    name: 'addFaceFromUrl(string, string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(personGroupId: string, personId: string, url: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: url
          type:
            - string
          description: URL publicamente acessível de uma imagem
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.create'
    name: 'create(string, Models.PersonGroupPersonCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Crie uma nova pessoa em um grupo de pessoa especificada.
    syntax:
      content: 'function create(personGroupId: string, options?: Models.PersonGroupPersonCreateOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: options
          type:
            - Models.PersonGroupPersonCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonCreateResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.create_2'
    name: 'create(string, PersonGroupPersonCreateOptionalParams, ServiceCallback<Person>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(personGroupId: string, options: PersonGroupPersonCreateOptionalParams, callback: ServiceCallback<Person>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonCreateOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.Person>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonCreateResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.create_1'
    name: 'create(string, ServiceCallback<Person>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(personGroupId: string, callback: ServiceCallback<Person>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.Person>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonCreateResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace'
    name: 'deleteFace(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Exclua uma face de uma pessoa em um grupo de pessoas persistedFaceId, personId e personGroupId especificado.
      <br /> Adição/exclusão de faces de/para uma pessoa mesma será processado sequencialmente.
      Adição/exclusão de faces de/para diferentes pessoas são processados em paralelo.
    syntax:
      content: 'function deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace_2'
    name: 'deleteFace(string, string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - RequestOptionsBase
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteFace_1'
    name: 'deleteFace(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod'
    name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Exclua uma pessoa existente de um grupo de pessoas. O persistedFaceId, userData, recurso de detecção facial e de nome de pessoa na entrada de pessoa serão todos excluído.'
    syntax:
      content: 'function deleteMethod(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod_2'
    name: 'deleteMethod(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(personGroupId: string, personId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - RequestOptionsBase
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.deleteMethod_1'
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(personGroupId: string, personId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.get'
    name: 'get(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Recupere informações de uma pessoa, incluindo dados do usuário, nome e registrados faces persistentes.'
    syntax:
      content: 'function get(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.get_2'
    name: 'get(string, string, RequestOptionsBase, ServiceCallback<Person>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(personGroupId: string, personId: string, options: RequestOptionsBase, callback: ServiceCallback<Person>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - RequestOptionsBase
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.Person>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.get_1'
    name: 'get(string, string, ServiceCallback<Person>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(personGroupId: string, personId: string, callback: ServiceCallback<Person>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.Person>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.getFace'
    name: 'getFace(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Recupere informações sobre uma face persistente (especificada pelo persistedFaceId, personId e seu personGroupId que pertence).'
    syntax:
      content: 'function getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.getFace_2'
    name: 'getFace(string, string, string, RequestOptionsBase, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(personGroupId: string, personId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - RequestOptionsBase
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.getFace_1'
    name: 'getFace(string, string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.list'
    name: 'list(string, Models.PersonGroupPersonListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Lista todas as pessoas em um grupo de pessoas e recuperar informações de pessoa (incluindo personId, nome, userData e persistedFaceIds de faces registrados da pessoa).'
    syntax:
      content: 'function list(personGroupId: string, options?: Models.PersonGroupPersonListOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: options
          type:
            - Models.PersonGroupPersonListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PersonGroupPersonListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.list_2'
    name: 'list(string, PersonGroupPersonListOptionalParams, ServiceCallback<Person[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(personGroupId: string, options: PersonGroupPersonListOptionalParams, callback: ServiceCallback<Person[]>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonListOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.Person[]>'
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.list_1'
    name: 'list(string, ServiceCallback<Person[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(personGroupId: string, callback: ServiceCallback<Person[]>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.Person[]>'
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<Models.PersonGroupPersonListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.constructor'
    name: PersonGroupPerson(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Crie um PersonGroupPerson.
    syntax:
      content: 'new PersonGroupPerson(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Referência para o cliente do serviço.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.update'
    name: 'update(string, string, Models.PersonGroupPersonUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Atualizar o nome ou a dados do usuário de uma pessoa.
    syntax:
      content: 'function update(personGroupId: string, personId: string, options?: Models.PersonGroupPersonUpdateOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - Models.PersonGroupPersonUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.update_2'
    name: 'update(string, string, PersonGroupPersonUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(personGroupId: string, personId: string, options: PersonGroupPersonUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonUpdateOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.update_1'
    name: 'update(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(personGroupId: string, personId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.updateFace'
    name: 'updateFace(string, string, string, Models.PersonGroupPersonUpdateFaceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Adicione uma face de uma pessoa em um grupo de pessoas para verificação ou de identificação de face. Para lidar com uma imagem contém várias faces, face de entrada pode ser especificado como uma imagem com um retângulo targetFace. Ele retorna um persistedFaceId que representa a face adicionada. Nenhuma imagem será armazenada.
      Somente o recurso de face extraído será armazenado no servidor até que [PersonGroup PersonFace - exclua](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup pessoa - excluir](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) ou [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) é chamado.
      <br /> Observação persistedFaceId é diferente do faceId gerado pelo [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Qualidade de imagem de face superior significa maior precisão do reconhecimento. Considere as faces de alta qualidade: frontais, clear e face tamanho é de 200 x 200 pixels (100 pixels, entre os olhos) ou maior.
      * Cada entrada de pessoa pode conter até 248 faces.
      * Há suporte para JPEG, PNG, GIF (o primeiro quadro) e formato BMP. O tamanho do arquivo de imagem permitida é de 1KB a 6MB.
      * "targetFace" retângulo deve conter uma face. Zero ou várias faces serão considerados um erro. Se o retângulo "targetFace" fornecido não for retornado por [enfrentam - detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), não há nenhuma garantia para detectar e adicionar a face com êxito.
      * Fora do tamanho de face detectável (36 x pixels de 4096 x 36 4096), grandes occlusions pose head ou grandes causará falhas.
      * Adição/exclusão de faces de/para uma pessoa mesma será processado sequencialmente. Adição/exclusão de faces de/para diferentes pessoas são processados em paralelo.
    syntax:
      content: 'function updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: Models.PersonGroupPersonUpdateFaceOptionalParams)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - Models.PersonGroupPersonUpdateFaceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.updateFace_2'
    name: 'updateFace(string, string, string, PersonGroupPersonUpdateFaceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(personGroupId: string, personId: string, persistedFaceId: string, options: PersonGroupPersonUpdateFaceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: options
          type:
            - '@azure/cognitiveservices-face.PersonGroupPersonUpdateFaceOptionalParams'
          description: Os parâmetros opcionais
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.PersonGroupPerson.updateFace_1'
    name: 'updateFace(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ID fazendo referência ao grupo de uma determinada pessoa.
        - id: personId
          type:
            - string
          description: ID de referência a uma determinada pessoa.
        - id: persistedFaceId
          type:
            - string
          description: ID referenciando um persistedFaceId específico de uma face existente.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            O retorno de chamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromStreamOptionalParams'
    name: PersonGroupPersonAddFaceFromStreamOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonAddFaceFromStreamOptionalParams
        fullName: PersonGroupPersonAddFaceFromStreamOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromUrlOptionalParams'
    name: PersonGroupPersonAddFaceFromUrlOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonAddFaceFromUrlOptionalParams
        fullName: PersonGroupPersonAddFaceFromUrlOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonAddFaceFromUrlOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.Person>
    name: Person>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Person
        fullName: Person
        uid: '@azure/cognitiveservices-face.Person'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonCreateOptionalParams'
    name: PersonGroupPersonCreateOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonCreateOptionalParams
        fullName: PersonGroupPersonCreateOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonCreateOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.Person[]>'
    name: 'Person[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Person
        fullName: Person
        uid: '@azure/cognitiveservices-face.Person'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonListOptionalParams'
    name: PersonGroupPersonListOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonListOptionalParams
        fullName: PersonGroupPersonListOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonListOptionalParams'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonUpdateOptionalParams'
    name: PersonGroupPersonUpdateOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonUpdateOptionalParams
        fullName: PersonGroupPersonUpdateOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonUpdateOptionalParams'
  - uid: '@azure/cognitiveservices-face.PersonGroupPersonUpdateFaceOptionalParams'
    name: PersonGroupPersonUpdateFaceOptionalParams
    spec.typeScript:
      - name: PersonGroupPersonUpdateFaceOptionalParams
        fullName: PersonGroupPersonUpdateFaceOptionalParams
        uid: '@azure/cognitiveservices-face.PersonGroupPersonUpdateFaceOptionalParams'