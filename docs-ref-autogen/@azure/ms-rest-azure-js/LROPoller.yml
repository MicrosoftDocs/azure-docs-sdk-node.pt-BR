### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPoller.getPollState'
      - '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPoller.isFinished'
      - '@azure/ms-rest-azure-js.LROPoller.constructor'
      - '@azure/ms-rest-azure-js.LROPoller.poll'
      - '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="eac61-101">Uma resposta de operação HTTP que fornece métodos especiais para interagir com LROs (operações de execução longa).</span><span class="sxs-lookup"><span data-stu-id="eac61-101">An HTTP operation response that provides special methods for interacting with LROs (long running operations).</span></span>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-102">Obtenha a primeira resposta que o serviço é enviado quando o LRO foi iniciada.</span><span class="sxs-lookup"><span data-stu-id="eac61-102">Get the first response that the service sent back when the LRO was initiated.</span></span>
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-103">Obtenha a resposta mais recente que o serviço enviado novamente durante esta LRO.</span><span class="sxs-lookup"><span data-stu-id="eac61-103">Get the most recent response that the service sent back during this LRO.</span></span>
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="eac61-104">Se terminar o LRO e em um estado aceitável, em seguida, retorne o HttpOperationResponse.</span><span class="sxs-lookup"><span data-stu-id="eac61-104">If the LRO is finished and in an acceptable state, then return the HttpOperationResponse.</span></span> <span data-ttu-id="eac61-105">Se o LRO estiver concluída e não em um estado aceitável, em seguida, gere o erro que produziu o LRO.</span><span class="sxs-lookup"><span data-stu-id="eac61-105">If the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.</span></span>
      <span data-ttu-id="eac61-106">Se o LRO não for concluída, em seguida, retorne indefinido.</span><span class="sxs-lookup"><span data-stu-id="eac61-106">If the LRO is not finished, then return undefined.</span></span>
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-107">Obter o status atual do LRO.</span><span class="sxs-lookup"><span data-stu-id="eac61-107">Get the current status of the LRO.</span></span>
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="eac61-108">Obter um objeto de LROPollState que pode ser usado para pesquisar esse LRO em um contexto diferente (como em um processo diferente ou em um computador diferente).</span><span class="sxs-lookup"><span data-stu-id="eac61-108">Get an LROPollState object that can be used to poll this LRO in a different context (such as on a different process or a different machine).</span></span> <span data-ttu-id="eac61-109">Se o LRO não foi possível gerar uma estratégia de sondagem de LRO, isso retornará indefinido.</span><span class="sxs-lookup"><span data-stu-id="eac61-109">If the LRO couldn''t produce an LRO polling strategy, then this will return undefined.</span></span>'
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState | undefined'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="eac61-110">Obter se ou não terminar o LRO e seu estado final é aceitável.</span><span class="sxs-lookup"><span data-stu-id="eac61-110">Get whether or not the LRO is finished and its final state is acceptable.</span></span> <span data-ttu-id="eac61-111">Se o LRO não tiver ainda concluído, então undefined será retornado.</span><span class="sxs-lookup"><span data-stu-id="eac61-111">If the LRO has not finished yet, then undefined will be returned.</span></span> <span data-ttu-id="eac61-112">Um estado final "aceitável" é determinado pela estratégia de LRO que o serviço do Azure usa para executar operações de longa execução.</span><span class="sxs-lookup"><span data-stu-id="eac61-112">An "acceptable" final state is determined by the LRO strategy that the Azure service uses to perform long running operations.</span></span>'
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-113">Get ou não o LRO for concluída.</span><span class="sxs-lookup"><span data-stu-id="eac61-113">Get whether or not the LRO is finished.</span></span>
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-114">Crie um novo HttpLongRunningOperationResponse.</span><span class="sxs-lookup"><span data-stu-id="eac61-114">Create a new HttpLongRunningOperationResponse.</span></span>
    syntax:
      content: 'new LROPoller(_lroPollStrategy: LROPollStrategy | undefined, _initialResponse: HttpOperationResponse)'
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
          description: |
            <span data-ttu-id="eac61-115">O que este HttpLongRunningOperationResponse usará para interagir com o LRO LROPollStrategy.</span><span class="sxs-lookup"><span data-stu-id="eac61-115">The LROPollStrategy that this HttpLongRunningOperationResponse will use to interact with the LRO.</span></span>
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-116">Enviar uma solicitação de pesquisa único e retornam o estado do LRO.</span><span class="sxs-lookup"><span data-stu-id="eac61-116">Send a single poll request and return the LRO's state.</span></span>
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="eac61-117">Envie solicitações de sondagem que verificam o status do LRO até que ele é determinado que o LRO está concluída.</span><span class="sxs-lookup"><span data-stu-id="eac61-117">Send poll requests that check the LRO's status until it is determined that the LRO is finished.</span></span>
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/ms-rest-azure-js.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
  - uid: '@azure/ms-rest-azure-js.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
      - name: '>'
        fullName: '>'