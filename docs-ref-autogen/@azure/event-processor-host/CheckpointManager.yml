### YamlMime:UniversalReference
ms.openlocfilehash: a00377b11a0a4f5c6d2453d40f079b28cb2f6aff
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52121097"
items:
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  - '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  - '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  name: checkpointStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: O armazenamento de ponto de verificação existe?
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  name: createAllCheckpointsIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Cria o ponto de verificação reservados para as partições determinados. Não faz nada para qualquer ponto de verificação detentores que já existem.

    A semântica isso é complicada porque é possível usar o mesmo repositório para concessões e pontos de verificação (a implementação do armazenamento do Azure faz isso) e é necessário ter uma concessão para cada partição, mas não é necessário ter um ponto de verificação para uma partição.

    É um cenário válido nunca usar pontos de verificação, portanto, é importante para a loja distinguir entre a criação de structure(s) que irá conter um ponto de verificação e, na verdade, criando um ponto de verificação (armazenar um par de números de sequência/deslocamento na estrutura).
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: Lista de partições para criar os detentores de ponto de verificação para.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  name: createCheckpointStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: Crie o repositório de ponto de verificação se ele não existir. Não faz nada se ele existir.
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  name: deleteCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Exclua o ponto de verificação armazenado para determinada partição. Se não houver nenhum ponto de verificação armazenado para determinada partição, que é tratado como sucesso. Excluir o ponto de verificação detentor da é permitido, mas não obrigatório; sua implementação é livre para fazer o que for mais conveniente.
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: PartitionId para excluir o ponto de verificação do armazenamento.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  name: deleteCheckpointStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: Exclui o armazenamento de ponto de verificação.
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  name: getCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Obtém as informações de ponto de verificação associadas a determinada partição. Poderia retornar indefinido se nenhum ponto de verificação tiver sido criado para essa partição.
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: Para obter as informações de ponto de verificação para partitionId.
    return:
      type:
      - Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  name: updateCheckpoint(CompleteLease, CheckpointInfo)
  children: []
  type: method
  langs:
  - typeScript
  summary: Atualize o ponto de verificação no repositório com o deslocamento/sequenceNumber no ponto de verificação fornecido.
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informações de partição na qual executar um ponto de verificação.
    - id: checkpoint
      type:
      - '@azure/event-processor-host.CheckpointInfo'
      description: deslocamento/sequeceNumber para atualizar o armazenamento com
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: '@azure/event-processor-host.CheckpointInfo'
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
