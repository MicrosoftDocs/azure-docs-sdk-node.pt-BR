### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104221"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="83b44-101">Adquira a concessão na partição desejada para esta EventProcessorHost.</span><span class="sxs-lookup"><span data-stu-id="83b44-101">Acquire the lease on the desired partition for this EventProcessorHost.</span></span>

    <span data-ttu-id="83b44-102">Observe que é legal para adquirir uma concessão que já pertence a outro host.</span><span class="sxs-lookup"><span data-stu-id="83b44-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span>

    <span data-ttu-id="83b44-103">Roubo de concessão é como as partições são redistribuídas quando hosts adicionais são iniciadas.</span><span class="sxs-lookup"><span data-stu-id="83b44-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span>


    <span data-ttu-id="83b44-104">A implementação existente do armazenamento do Azure pode apresentar corridas entre duas instâncias de host, a tentativa de adquirir ou roubar a concessão ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="83b44-104">The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time.</span></span> <span data-ttu-id="83b44-105">Para evitar situações em que duas instâncias de host ambos acreditam que eles possuem a concessão, aquisição pode falhar sem erros, retornando false e deve fazer isso quando houver alguma dúvida, o pior que pode acontecer é que nenhuma instância de host é proprietário da concessão por um curto período.</span><span class="sxs-lookup"><span data-stu-id="83b44-105">To avoid situations where two host instances both believe that they own the lease, acquisition can fail without errors by returning false and should do so when there is any doubt -- the worst that can happen is that no host instance owns the lease for a short time.</span></span> <span data-ttu-id="83b44-106">Isso é qualitativa diferente de, por exemplo, o armazenamento subjacente, lançando uma exceção de acesso, que é um erro.</span><span class="sxs-lookup"><span data-stu-id="83b44-106">This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error.</span></span>
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="83b44-107">Informações de partição desejada obtida anteriormente da concessão `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="83b44-107">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-108">Crie no repositório de informações de concessão para determinada partição, se ele não existir.</span><span class="sxs-lookup"><span data-stu-id="83b44-108">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="83b44-109">Não fazer nada se ele já existir no repositório.</span><span class="sxs-lookup"><span data-stu-id="83b44-109">Do nothing if it does exist in the store already.</span></span>
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="83b44-110">IDs de partições para criar informações de concessão para</span><span class="sxs-lookup"><span data-stu-id="83b44-110">ids of partitions to create lease info for</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-111">Crie o repositório de concessão se ela não existir.</span><span class="sxs-lookup"><span data-stu-id="83b44-111">Create the lease store if it doesn't exist.</span></span> <span data-ttu-id="83b44-112">Não faça nada se ele existir.</span><span class="sxs-lookup"><span data-stu-id="83b44-112">Do nothing if it does exist.</span></span>
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-113">Exclua as informações de concessão para determinada partição do armazenamento.</span><span class="sxs-lookup"><span data-stu-id="83b44-113">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="83b44-114">Se não houver nenhuma concessão armazenado para determinada partição, que é tratado como sucesso.</span><span class="sxs-lookup"><span data-stu-id="83b44-114">If there is no stored lease for the given partition, that is treated as success.</span></span>
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="83b44-115">Informações de partição desejada obtida anteriormente da concessão `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="83b44-115">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-116">Exclua concessão de armazenamento.</span><span class="sxs-lookup"><span data-stu-id="83b44-116">Delete lease store.</span></span>
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-117">Retorna BaseLease leve para todas as concessões, que inclui o nome do proprietário de host e se a concessão expirou.</span><span class="sxs-lookup"><span data-stu-id="83b44-117">Returns lightweight BaseLease for all leases, which includes name of owning host and whether lease is expired.</span></span> <span data-ttu-id="83b44-118">Uma implementação está livre para retornar CompleteLease ou sua própria classe derivada de CompleteLease, mas é importante que getAllLeases executado mais rápido possível.</span><span class="sxs-lookup"><span data-stu-id="83b44-118">An implementation is free to return CompleteLease or its own class derived from CompleteLease, but it is important that getAllLeases run as fast as possible.</span></span> <span data-ttu-id="83b44-119">Se ele é mais rápido obter apenas as informações necessárias para um BaseLease, é altamente recomendável fazer que.</span><span class="sxs-lookup"><span data-stu-id="83b44-119">If it is faster to obtain only the information required for a BaseLease, we heavily recommend doing that.</span></span>
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-120">Obtém as informações de concessão para a partição especificada.</span><span class="sxs-lookup"><span data-stu-id="83b44-120">Gets the lease info for the specified partition.</span></span> <span data-ttu-id="83b44-121">Pode retornar `undefined` se nenhuma concessão tiver sido criado no armazenamento para a partição especificada.</span><span class="sxs-lookup"><span data-stu-id="83b44-121">Can return `undefined` if no lease has been created in the store for the specified partition.</span></span>
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="83b44-122">Id de partição para obter a concessão do.</span><span class="sxs-lookup"><span data-stu-id="83b44-122">Partition id to get the lease for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: <span data-ttu-id="83b44-123">{number} leaseDuration duração de uma concessão **em segundos** antes de expirar, a menos que renovado.</span><span class="sxs-lookup"><span data-stu-id="83b44-123">{number} leaseDuration Duration of a lease **in seconds** before it expires unless renewed.</span></span>
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    <span data-ttu-id="83b44-124">{number} leaseRenewInterval o intervalo de suspensão **em segundos** entre as varreduras.</span><span class="sxs-lookup"><span data-stu-id="83b44-124">{number} leaseRenewInterval The sleep interval **in seconds** between scans.</span></span>


    <span data-ttu-id="83b44-125">Permite que uma implementação de Gerenciador de concessão especificar a PartitionManager a frequência com que ele deve verificar as concessões e renová-los.</span><span class="sxs-lookup"><span data-stu-id="83b44-125">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="83b44-126">Para redistribuir as concessões de forma oportuna depois que um host parar de funcionar, é recomendável um intervalo relativamente curto, como dez segundos.</span><span class="sxs-lookup"><span data-stu-id="83b44-126">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="83b44-127">Obviamente, ele deve ser menos da metade a duração de concessão, para impedir a expiração acidental.</span><span class="sxs-lookup"><span data-stu-id="83b44-127">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span>
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="83b44-128">O repositório de concessão existe?</span><span class="sxs-lookup"><span data-stu-id="83b44-128">Does the lease store exist?</span></span>
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="83b44-129">Desista de uma concessão atualmente mantida por este host.</span><span class="sxs-lookup"><span data-stu-id="83b44-129">Give up a lease currently held by this host.</span></span>

    <span data-ttu-id="83b44-130">Se a concessão foi roubada ou expirou, liberá-la, é desnecessário e falhará se você tentar.</span><span class="sxs-lookup"><span data-stu-id="83b44-130">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span>
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="83b44-131">Informações de partição desejada obtida anteriormente da concessão `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="83b44-131">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="83b44-132">Renove uma concessão atualmente mantida por este host.</span><span class="sxs-lookup"><span data-stu-id="83b44-132">Renew a lease currently held by this host.</span></span>

    <span data-ttu-id="83b44-133">Se a concessão foi feita por outra instância de host (roubada ou após a expiração) ou explicitamente liberada, renewLease deve retornar false.</span><span class="sxs-lookup"><span data-stu-id="83b44-133">If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false.</span></span> <span data-ttu-id="83b44-134">Com a implementação com base no armazenamento do Azure, é possível renovar uma concessão expirada que não tiver sido tomada por outro host, portanto, sua implementação pode permitir que a ou não, o que for conveniente.</span><span class="sxs-lookup"><span data-stu-id="83b44-134">With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient.</span></span> <span data-ttu-id="83b44-135">Se isso não acontecer, renewLease deve retornar false.</span><span class="sxs-lookup"><span data-stu-id="83b44-135">If it does not, renewLease should return false.</span></span>
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="83b44-136">concessão deve ser renovado.</span><span class="sxs-lookup"><span data-stu-id="83b44-136">lease to be renewed.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="83b44-137">Atualize o repositório com as informações a concessão fornecida.</span><span class="sxs-lookup"><span data-stu-id="83b44-137">Update the store with the information in the provided lease.</span></span>

    <span data-ttu-id="83b44-138">É necessário manter no momento uma concessão para atualizá-lo.</span><span class="sxs-lookup"><span data-stu-id="83b44-138">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="83b44-139">Se a concessão foi roubada ou expiradas ou lançado, ele não pode ser atualizado.</span><span class="sxs-lookup"><span data-stu-id="83b44-139">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="83b44-140">Implementações do Gerenciador de concessão devem renovar a concessão antes de executar a atualização para evitar a expiração da concessão durante o processo.</span><span class="sxs-lookup"><span data-stu-id="83b44-140">Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</span></span>
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="83b44-141">Novas informações de concessão a ser armazenado.</span><span class="sxs-lookup"><span data-stu-id="83b44-141">New lease information to be stored.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"
