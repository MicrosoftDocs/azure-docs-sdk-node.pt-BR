### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104221"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Adquira a concessão na partição desejada para esta EventProcessorHost.

    Observe que é legal para adquirir uma concessão que já pertence a outro host.

    Roubo de concessão é como as partições são redistribuídas quando hosts adicionais são iniciadas.


    A implementação existente do armazenamento do Azure pode apresentar corridas entre duas instâncias de host, a tentativa de adquirir ou roubar a concessão ao mesmo tempo. Para evitar situações em que duas instâncias de host ambos acreditam que eles possuem a concessão, aquisição pode falhar sem erros, retornando false e deve fazer isso quando houver alguma dúvida, o pior que pode acontecer é que nenhuma instância de host é proprietário da concessão por um curto período. Isso é qualitativa diferente de, por exemplo, o armazenamento subjacente, lançando uma exceção de acesso, que é um erro.
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informações de partição desejada obtida anteriormente da concessão `getLease()`.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: Crie no repositório de informações de concessão para determinada partição, se ele não existir. Não fazer nada se ele já existir no repositório.
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: IDs de partições para criar informações de concessão para
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: Crie o repositório de concessão se ela não existir. Não faça nada se ele existir.
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: Exclua as informações de concessão para determinada partição do armazenamento. Se não houver nenhuma concessão armazenado para determinada partição, que é tratado como sucesso.
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informações de partição desejada obtida anteriormente da concessão `getLease()`.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: Exclua concessão de armazenamento.
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: Retorna BaseLease leve para todas as concessões, que inclui o nome do proprietário de host e se a concessão expirou. Uma implementação está livre para retornar CompleteLease ou sua própria classe derivada de CompleteLease, mas é importante que getAllLeases executado mais rápido possível. Se ele é mais rápido obter apenas as informações necessárias para um BaseLease, é altamente recomendável fazer que.
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Obtém as informações de concessão para a partição especificada. Pode retornar `undefined` se nenhuma concessão tiver sido criado no armazenamento para a partição especificada.
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: Id de partição para obter a concessão do.
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: '{number} leaseDuration duração de uma concessão **em segundos** antes de expirar, a menos que renovado.'
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    {number} leaseRenewInterval o intervalo de suspensão **em segundos** entre as varreduras.


    Permite que uma implementação de Gerenciador de concessão especificar a PartitionManager a frequência com que ele deve verificar as concessões e renová-los. Para redistribuir as concessões de forma oportuna depois que um host parar de funcionar, é recomendável um intervalo relativamente curto, como dez segundos. Obviamente, ele deve ser menos da metade a duração de concessão, para impedir a expiração acidental.
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: O repositório de concessão existe?
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Desista de uma concessão atualmente mantida por este host.

    Se a concessão foi roubada ou expirou, liberá-la, é desnecessário e falhará se você tentar.
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informações de partição desejada obtida anteriormente da concessão `getLease()`.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Renove uma concessão atualmente mantida por este host.

    Se a concessão foi feita por outra instância de host (roubada ou após a expiração) ou explicitamente liberada, renewLease deve retornar false. Com a implementação com base no armazenamento do Azure, é possível renovar uma concessão expirada que não tiver sido tomada por outro host, portanto, sua implementação pode permitir que a ou não, o que for conveniente. Se isso não acontecer, renewLease deve retornar false.
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: concessão deve ser renovado.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Atualize o repositório com as informações a concessão fornecida.

    É necessário manter no momento uma concessão para atualizá-lo. Se a concessão foi roubada ou expiradas ou lançado, ele não pode ser atualizado. Implementações do Gerenciador de concessão devem renovar a concessão antes de executar a atualização para evitar a expiração da concessão durante o processo.
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Novas informações de concessão a ser armazenado.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"
