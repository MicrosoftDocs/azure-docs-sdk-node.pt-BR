### YamlMime:UniversalReference
ms.openlocfilehash: 6ba5ac3c693177f8af42e6a22afe2d7805016620
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52095620"
items:
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  fullName: EventProcessorHost
  children:
  - '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createHostName'
  - '@azure/event-processor-host.EventProcessorHost.constructor'
  - '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  - '@azure/event-processor-host.EventProcessorHost.hostName'
  - '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  - '@azure/event-processor-host.EventProcessorHost.start'
  - '@azure/event-processor-host.EventProcessorHost.stop'
  langs:
  - typeScript
  type: class
  summary: Descreve o Host do processador de eventos para processar eventos de um hub de eventos.
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  name: consumerGroup
  fullName: consumerGroup
  children: []
  langs:
  - typeScript
  type: property
  summary: Fornece o consumidor de nome de grupo para o host do processador de eventos.
  syntax:
    content: 'consumerGroup: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  name: createFromAadTokenCredentials(string, string, string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost de credenciais do token do AAD.
  syntax:
    content: 'static function createFromAadTokenCredentials(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Cadeia de caracteres de Conexão usada para concessões e o ponto de verificação de conta de armazenamento do Azure. Exemplo DefaultEndpointsProtocol = https; AccountName = < nome da conta >; AccountKey = < chave da conta >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome do contêiner de armazenamento do Azure para uso pelo Gerenciador de concessão e o ponto de verificação internos.
    - id: namespace
      type:
      - string
      description: >-
        Nome de domínio totalmente qualificado para os Hubs de eventos.

        Exemplo: "{your-sb-namespace}. servicebus.windows .net"
    - id: eventHubPath
      type:
      - string
      description: O nome do que o hub de eventos.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'As credenciais do Token do AAD. Ele pode ser um dos seguintes: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  name: createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost de credenciais do token do AAD com o Gerenciador de determinado ponto de verificação e o Gerenciador de concessão.
  syntax:
    content: 'static function createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Nome de domínio totalmente qualificado para os Hubs de eventos.

        Exemplo: "{your-sb-namespace}. servicebus.windows .net"
    - id: eventHubPath
      type:
      - string
      description: O nome do que o hub de eventos.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'As credenciais do Token do AAD. Ele pode ser um dos seguintes: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Um Gerenciador para gerenciar pontos de verificação.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Um Gerenciador para gerenciar as concessões.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  name: createFromConnectionString(string, string, string, string, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost da cadeia de caracteres de conexão do hub de eventos.
  syntax:
    content: 'static function createFromConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, eventHubConnectionString: string, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Cadeia de caracteres de Conexão usada para concessões e o ponto de verificação de conta de armazenamento do Azure. Exemplo DefaultEndpointsProtocol = https; AccountName = < nome da conta >; AccountKey = < chave da conta >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome do contêiner de armazenamento do Azure para uso pelo Gerenciador de concessão e o ponto de verificação internos.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Cadeia de caracteres de Conexão para o Hub de eventos receber do.

        Exemplo: ' Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost da cadeia de conexão de hub de eventos com o Gerenciador de ponto de verificação fornecido e o Gerenciador de concessão.
  syntax:
    content: 'static function createFromConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, eventHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Cadeia de caracteres de Conexão para o Hub de eventos receber do.

        Exemplo: ' Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Um Gerenciador para gerenciar pontos de verificação.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Um Gerenciador para gerenciar as concessões.
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  name: createFromIotHubConnectionString(string, string, string, string, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost da cadeia de caracteres de conexão do hub IOT.
  syntax:
    content: 'static function createFromIotHubConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, iotHubConnectionString: string, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Cadeia de caracteres de Conexão usada para concessões e o ponto de verificação de conta de armazenamento do Azure. Exemplo DefaultEndpointsProtocol = https; AccountName = < nome da conta >; AccountKey = < chave da conta >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome do contêiner de armazenamento do Azure para uso pelo Gerenciador de concessão e o ponto de verificação internos.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Cadeia de caracteres de Conexão para o hub IOT.

        Exemplo: ' Ponto de extremidade = iot-nome de host; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost da cadeia de conexão de Hub IOT com o Gerenciador de determinado ponto de verificação e o Gerenciador de concessão.
  syntax:
    content: 'static function createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, iotHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Cadeia de caracteres de Conexão para o hub IOT.

        Exemplo: ' Ponto de extremidade = iot-nome de host; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Um Gerenciador para gerenciar pontos de verificação.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Um Gerenciador para gerenciar as concessões.
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  name: createFromTokenProvider(string, string, string, string, string, TokenProvider, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost de um TokenProvider.
  syntax:
    content: 'static function createFromTokenProvider(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Cadeia de caracteres de Conexão usada para concessões e o ponto de verificação de conta de armazenamento do Azure. Exemplo DefaultEndpointsProtocol = https; AccountName = < nome da conta >; AccountKey = < chave da conta >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome do contêiner de armazenamento do Azure para uso pelo Gerenciador de concessão e o ponto de verificação internos.
    - id: namespace
      type:
      - string
      description: >-
        Nome de domínio totalmente qualificado para os Hubs de eventos.

        Exemplo: "{your-sb-namespace}. servicebus.windows .net"
    - id: eventHubPath
      type:
      - string
      description: O nome do que o hub de eventos.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Seu provedor de token que implementa a interface TokenProvider.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  name: createFromTokenProviderWithCustomCheckpointAndLeaseManager(string, string, string, TokenProvider, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cria uma instância do EventProcessorHost de um TokenProvider com o Gerenciador de ponto de verificação fornecido e o Gerenciador de concessão.
  syntax:
    content: 'static function createFromTokenProviderWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Nome de domínio totalmente qualificado para os Hubs de eventos.

        Exemplo: "{your-sb-namespace}. servicebus.windows .net"
    - id: eventHubPath
      type:
      - string
      description: O nome do que o hub de eventos.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Seu provedor de token que implementa a interface TokenProvider.
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Um Gerenciador para gerenciar pontos de verificação.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Um Gerenciador para gerenciar as concessões.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createHostName'
  name: createHostName(undefined | string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Método de conveniência para a geração de nome de host exclusivo.
  syntax:
    content: 'static function createHostName(prefix?: undefined | string)'
    parameters:
    - id: prefix
      type:
      - undefined | string
      description: ''
      optional: true
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.constructor'
  name: EventProcessorHost(string, EventProcessorHostOptions)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: Cria um novo host para processar eventos de um Hub de eventos.
  syntax:
    content: 'new EventProcessorHost(hostName: string, options?: EventProcessorHostOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome do host do processador. DEVE SER EXCLUSIVO.

        Altamente recomendável incluindo um Guid ou um prefixo com um guid para garantir a exclusividade. Você pode usar `EventProcessorHost.createHostName("your-prefix")`; Padrão: `js-host-${uuid()}`.
    - id: options
      type:
      - '@azure/event-processor-host.EventProcessorHostOptions'
      description: ''
      optional: true
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  name: getHubRuntimeInformation()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornece as informações de tempo de execução do hub de eventos.
  syntax:
    content: function getHubRuntimeInformation()
    parameters: []
    return:
      type:
      - Promise<EventHubRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  name: getPartitionIds()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornece uma matriz de partitionIds.
  syntax:
    content: function getPartitionIds()
    parameters: []
    return:
      type:
      - Promise<string[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  name: getPartitionInformation(string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornece informações sobre a partição especificada.
  syntax:
    content: 'function getPartitionInformation(partitionId: string | number)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: >
        ID de partição para a qual partição informações são necessárias.
    return:
      type:
      - Promise<EventHubPartitionRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.hostName'
  name: hostName
  fullName: hostName
  children: []
  langs:
  - typeScript
  type: property
  summary: Fornece o nome de host para o host do processador de eventos.
  syntax:
    content: 'hostName: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  name: receivingFromPartitions
  fullName: receivingFromPartitions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Fornece uma lista de partições de que de EPH atualmente está recebendo mensagens.

    O EPH tentará obter concessões para partições mais durante cada verificação que acontece depois de segundos de renovação de cada concessão (configurado). O número de instâncias do EPH que estão sendo executados simultaneamente para receber mensagens do mesmo grupo de consumidores dentro de um hub de eventos também influencia o número de partições que esta instância de EPH ativamente está recebendo mensagens de.
  syntax:
    content: 'receivingFromPartitions: string[]'
    return:
      type:
      - string[]
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.start'
  name: start(OnReceivedMessage, OnReceivedError)
  children: []
  type: method
  langs:
  - typeScript
  summary: Inicia o host do processador de eventos, buscando a lista de partições, e tentar obter concessões de cada concessão com êxito, ele irá obter os detalhes do blob e iniciar um receptor no ponto onde ela parou anteriormente.
  syntax:
    content: 'function start(onMessage: OnReceivedMessage, onError: OnReceivedError)'
    parameters:
    - id: onMessage
      type:
      - '@azure/event-processor-host.OnReceivedMessage'
      description: ''
    - id: onError
      type:
      - '@azure/event-processor-host.OnReceivedError'
      description: ''
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.stop'
  name: stop()
  children: []
  type: method
  langs:
  - typeScript
  summary: Interrompe o EventProcessorHost do processamento de mensagens.
  syntax:
    content: function stop()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.EventProcessorHostOptions'
  name: EventProcessorHostOptions
  spec.typeScript:
  - name: EventProcessorHostOptions
    fullName: EventProcessorHostOptions
    uid: '@azure/event-processor-host.EventProcessorHostOptions'
- uid: '@azure/event-processor-host.OnReceivedMessage'
  name: OnReceivedMessage
  spec.typeScript:
  - name: OnReceivedMessage
    fullName: OnReceivedMessage
    uid: '@azure/event-processor-host.OnReceivedMessage'
- uid: '@azure/event-processor-host.OnReceivedError'
  name: OnReceivedError
  spec.typeScript:
  - name: OnReceivedError
    fullName: OnReceivedError
    uid: '@azure/event-processor-host.OnReceivedError'
- uid: '@azure/event-processor-host.FromTokenProviderOptions'
  name: FromTokenProviderOptions
  spec.typeScript:
  - name: FromTokenProviderOptions
    fullName: FromTokenProviderOptions
    uid: '@azure/event-processor-host.FromTokenProviderOptions'
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  spec.typeScript:
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  spec.typeScript:
  - name: CheckpointManager
    fullName: CheckpointManager
    uid: '@azure/event-processor-host.CheckpointManager'
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  spec.typeScript:
  - name: LeaseManager
    fullName: LeaseManager
    uid: '@azure/event-processor-host.LeaseManager'
- uid: '@azure/event-processor-host.FromConnectionStringOptions'
  name: FromConnectionStringOptions
  spec.typeScript:
  - name: FromConnectionStringOptions
    fullName: FromConnectionStringOptions
    uid: '@azure/event-processor-host.FromConnectionStringOptions'
- uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
  name: FromIotHubConnectionStringOptions
  spec.typeScript:
  - name: FromIotHubConnectionStringOptions
    fullName: FromIotHubConnectionStringOptions
    uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
- uid: Promise<@azure/event-processor-host.EventProcessorHost>
  name: EventProcessorHost>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
  - name: '>'
    fullName: '>'
